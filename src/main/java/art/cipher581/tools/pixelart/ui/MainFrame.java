package art.cipher581.tools.pixelart.ui;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import art.cipher581.commons.gui.event.UIEvent;
import art.cipher581.commons.gui.util.PerformActionException;
import art.cipher581.tools.pixelart.GlobalModel;
import art.cipher581.tools.pixelart.core.IProjectChangeObserver;
import art.cipher581.tools.pixelart.core.Pixel;
import art.cipher581.tools.pixelart.core.Project;
import art.cipher581.tools.pixelart.ui.actions.SaveAction;


public class MainFrame extends JFrame {

    /**
	 * SVUID
	 */
	private static final long serialVersionUID = -1988904017922627758L;

	private final Project project;

    private ProjectImagePanel projectImagePanel;

    private PixelPanel pixelPanelLast;

    private PixelPanel pixelPanelCurrent;


    /**
     * Creates new form MainFrame
     */
    public MainFrame(Project project) {
        super();

        this.project = project;
        this.projectImagePanel = new ProjectImagePanel(project.getImage());
        this.pixelPanelLast = new PixelPanel("Last");
        this.pixelPanelCurrent = new PixelPanel("Current");

        initComponents();

        init();
    }

    private void updateTitle() {
        String title = "Current Project: " + project.getProjectFile().getPath();

        if (project.isChanged()) {
            title += "*";
        }

        setTitle(title);
    }

    private void init() {
        setSize(1024, 768);

        updateTitle();

        jPanelImage.add(projectImagePanel);
        jPanelPixelContainer1.add(pixelPanelLast);
        jPanelPixelContainer2.add(pixelPanelCurrent);

        applyGuiConfiguration();

        jSplitPane1.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, createDividerLocationListener());

        addComponentListener(createResizeListener());

        Pixel last = project.getLast();
        Pixel current = project.getCurrent();

        if (last != null) {
            pixelPanelLast.setPixel(last);
        }

        if (current != null) {
            pixelPanelCurrent.setPixel(current);
        }

        project.addChangeObserver(createChangeObserver());
    }

    private PropertyChangeListener createDividerLocationListener() {
        return new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                int dL = jSplitPane1.getDividerLocation();

                GlobalModel.getGuiConfiguration().setVerticalDividerLocation(dL);
            }
        };
    }

    private ComponentListener createResizeListener() {
        return new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent e) {
                GuiConfiguration guiConfiguration = GlobalModel.getGuiConfiguration();
                guiConfiguration.setFrameWidth(getWidth());
                guiConfiguration.setFrameHeight(getHeight());
            }

            @Override
            public void componentMoved(ComponentEvent e) {
                // do nothing
            }

            @Override
            public void componentShown(ComponentEvent e) {
                // do nothing
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                // do nothing
            }
        };

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelContent = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelPixelContainers = new javax.swing.JPanel();
        jPanelPixelContainer1 = new javax.swing.JPanel();
        jPanelPixelContainer2 = new javax.swing.JPanel();
        jPanelProjectButtons = new javax.swing.JPanel();
        jButtonDone = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanelImage = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanelContent.setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanelPixelContainers.setLayout(new java.awt.GridBagLayout());

        jPanelPixelContainer1.setLayout(new java.awt.GridLayout(1, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelPixelContainers.add(jPanelPixelContainer1, gridBagConstraints);

        jPanelPixelContainer2.setLayout(new java.awt.GridLayout(1, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelPixelContainers.add(jPanelPixelContainer2, gridBagConstraints);

        jPanelProjectButtons.setLayout(new java.awt.GridBagLayout());

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelProjectButtons.add(jButtonDone, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanelProjectButtons.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        jPanelPixelContainers.add(jPanelProjectButtons, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanelPixelContainers);

        jPanelImage.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanelImage.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanelImage.setLayout(new java.awt.GridLayout(1, 0));
        jSplitPane1.setRightComponent(jPanelImage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelContent.add(jSplitPane1, gridBagConstraints);

        getContentPane().add(jPanelContent);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
        done();
    }//GEN-LAST:event_jButtonDoneActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        save();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDone;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelImage;
    private javax.swing.JPanel jPanelPixelContainer1;
    private javax.swing.JPanel jPanelPixelContainer2;
    private javax.swing.JPanel jPanelPixelContainers;
    private javax.swing.JPanel jPanelProjectButtons;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    private void done() {
        UIEvent event = new UIEvent("Done", this);

        GlobalModel.getEventRegistry().eventOccured(event);
    }

    private void save() {
        UIEvent event = new UIEvent("Save", this);

        GlobalModel.getEventRegistry().eventOccured(event);
    }

    private void applyGuiConfiguration() {
        GuiConfiguration guiConfiguration = GlobalModel.getGuiConfiguration();
        int dL = guiConfiguration.getVerticalDividerLocation();
        int frameWidth = guiConfiguration.getFrameWidth();
        int frameHeight = guiConfiguration.getFrameHeight();

        setSize(frameWidth, frameHeight);
        jSplitPane1.setDividerLocation(dL);
    }

    private IProjectChangeObserver createChangeObserver() {
        return new IProjectChangeObserver() {
            @Override
            public void projectChanged() {
                Pixel last = project.getLast();
                Pixel current = project.getCurrent();

                if (last != null) {
                    pixelPanelLast.setPixel(last);
                }

                if (current != null) {
                    pixelPanelCurrent.setPixel(current);
                }

                updateTitle();
            }
        };
    }

    private void close() {
        while (project.isChanged()) {
            int option = JOptionPane.showOptionDialog(this, "Do you want to save the project?", "Unsaved changes", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

            if (option == JOptionPane.YES_OPTION) {
                try {
                    new SaveAction().performAction();
                } catch (PerformActionException ex) {
                    ex.printStackTrace();
                    continue;
                }
            } else if (option == JOptionPane.CANCEL_OPTION) {
                return;
            } else {
                break;
            }
        }

        dispose();
        System.exit(0);
    }

}
